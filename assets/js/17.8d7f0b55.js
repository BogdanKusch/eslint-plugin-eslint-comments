(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{193:function(e,r,t){"use strict";t.r(r);var n=t(2),o=Object(n.a)({},function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"eslint-comments-no-unused-disable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eslint-comments-no-unused-disable","aria-hidden":"true"}},[e._v("#")]),e._v(" eslint-comments/no-unused-disable")]),e._v(" "),t("blockquote",[t("p",[e._v("disallow unused "),t("code",[e._v("eslint-disable")]),e._v(" comments")])]),e._v(" "),t("p",[e._v("Since refactoring or a bug fix of upstream, an "),t("code",[e._v("eslint-disable")]),e._v(" directive-comment may become unnecessary.\nIn that case, you should remove the garbage as soon as possible since the garbage may cause to overlook ESLint warnings in future.")]),e._v(" "),t("p",[e._v("This rule warns unnecessary "),t("code",[e._v("eslint-disable")]),e._v(" directive-comments.")]),e._v(" "),t("h2",{attrs:{id:"rule-details"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#rule-details","aria-hidden":"true"}},[e._v("#")]),e._v(" Rule Details")]),e._v(" "),t("p",[e._v("Examples of üëé "),t("strong",[e._v("incorrect")]),e._v(" code for this rule:")]),e._v(" "),t("eslint-playground",{attrs:{type:"bad",reportUnusedDisable:"",code:"/*eslint eslint-comments/no-unused-disable: error, eqeqeq: error, no-undef: error */\n\nvar foo = bar() //eslint-disable-line no-undef,eqeqeq\n"}}),e._v(" "),t("eslint-playground",{attrs:{type:"bad",reportUnusedDisable:"",code:"/*eslint eslint-comments/no-unused-disable: error, eqeqeq: error, no-undef: error */\n/*globals doSomething */\n\ndoSomething() //eslint-disable-line\n"}}),e._v(" "),t("p",[e._v("Examples of üëç "),t("strong",[e._v("correct")]),e._v(" code for this rule:")]),e._v(" "),t("eslint-playground",{attrs:{type:"good",reportUnusedDisable:"",code:"/*eslint eslint-comments/no-unused-disable: error, eqeqeq: error, no-undef: error */\n\nvar foo = bar() //eslint-disable-line no-undef\n"}}),e._v(" "),t("eslint-playground",{attrs:{type:"good",reportUnusedDisable:"",code:"/*eslint eslint-comments/no-unused-disable: error, eqeqeq: error, no-undef: error */\n/*globals doSomething */\n\ndoSomething()\n"}}),e._v(" "),t("h2",{attrs:{id:"known-limitations"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#known-limitations","aria-hidden":"true"}},[e._v("#")]),e._v(" Known limitations")]),e._v(" "),t("p",[e._v("This rule might not work fine if the rule wasn't loaded from "),t("a",{attrs:{href:"https://eslint.org/docs/developer-guide/nodejs-api#cliengine",target:"_blank",rel:"noopener noreferrer"}},[e._v("CLIEngine"),t("OutboundLink")],1),e._v(" class because this rule is hacky a bit.")]),e._v(" "),t("p",[e._v("Previously, this rule had depended on a private API of ESLint, but the private API was removed at ESLint 5.0.0 (see "),t("a",{attrs:{href:"https://github.com/eslint/eslint/issues/10140",target:"_blank",rel:"noopener noreferrer"}},[e._v("eslint/eslint#10140"),t("OutboundLink")],1),e._v(" for details).\nSo this rule is now using two public APIs as an alternative hack.")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://nodejs.org/api/modules.html#modules_require_cache",target:"_blank",rel:"noopener noreferrer"}},[e._v("require.cache"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://eslint.org/docs/developer-guide/nodejs-api#linterverify",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linter.prototype.verify"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("And it needs an assumption:")]),e._v(" "),t("ul",[t("li",[e._v("The rule was loaded from "),t("code",[e._v("CLIEngine")]),e._v(" API."),t("br"),e._v("\n(I.e., the "),t("code",[e._v("eslint")]),e._v(" module was loaded already, but the "),t("code",[e._v("Linter.prototype.verify")]),e._v(" method hasn't been called yet.)")])]),e._v(" "),t("h3",{attrs:{id:"how-it-works"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how-it-works","aria-hidden":"true"}},[e._v("#")]),e._v(" How it works")]),e._v(" "),t("p",[e._v("When the rule is loaded, it searches "),t("code",[e._v("eslint")]),e._v(" module from "),t("code",[e._v("require.cache")]),e._v(" API and it overrides "),t("code",[e._v("Linter.prototype.verify")]),e._v(" method.")]),e._v(" "),t("p",[e._v("The overridden "),t("code",[e._v("Linter.prototype.verify")]),e._v(" method does the following steps:")]),e._v(" "),t("ol",[t("li",[e._v("If "),t("code",[e._v('config.rules["eslint-comments/no-unused-disable"]')]),e._v(" is not enabled, it calls "),t("code",[e._v("super.verify")]),e._v(" and returns the result as is.")]),e._v(" "),t("li",[e._v("Otherwise, it calls "),t("code",[e._v("super.verify")]),e._v(" with "),t("code",[e._v("reportUnusedDisableDirectives")]),e._v(" option.")]),e._v(" "),t("li",[e._v("It converts the result of "),t("code",[e._v("super.verify")]),e._v(" as from "),t("code",[e._v("reportUnusedDisableDirectives")]),e._v(" errors to "),t("code",[e._v("eslint-comments/no-unused-disable")]),e._v(" errors.")]),e._v(" "),t("li",[e._v("It returns the converted result.")])])],1)},[],!1,null,null,null);r.default=o.exports}}]);